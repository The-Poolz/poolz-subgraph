type GovernorUpdated @entity(immutable: true) {
  id: Bytes!
  oldGovernor: Bytes! # address
  newGovernor: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DelayVaultOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DelayVaultPaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RedeemedTokens @entity(immutable: true) {
  id: Bytes!
  Token: Bytes! # address
  Amount: BigInt! # uint256
  RemaningAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenRedemptionApproval @entity(immutable: true) {
  id: Bytes!
  Token: Bytes! # address
  User: Bytes! # address
  Status: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenStatusFilter @entity(immutable: true) {
  id: Bytes!
  Token: Bytes! # address
  Status: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DelayVaultTransferIn @entity(immutable: true) {
  id: Bytes!
  Amount: BigInt! # uint256
  From: Bytes! # address
  Token: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DelayVaultTransferOut @entity(immutable: true) {
  id: Bytes!
  Amount: BigInt! # uint256
  To: Bytes! # address
  Token: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DelayVaultUnpaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdatedMaxDelay @entity(immutable: true) {
  id: Bytes!
  OldDelay: BigInt! # uint256
  NewDelay: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UpdatedMinDelays @entity(immutable: true) {
  id: Bytes!
  Token: Bytes! # address
  Amounts: [BigInt!]! # uint256[]
  StartDelays: [BigInt!]! # uint256[]
  CliffDelays: [BigInt!]! # uint256[]
  FinishDelays: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VaultValueChanged @entity(immutable: true) {
  id: Bytes!
  Token: Bytes! # address
  Owner: Bytes! # address
  Amount: BigInt! # uint256
  StartDelay: BigInt! # uint256
  CliffDelay: BigInt! # uint256
  FinishDelay: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type UpdateParams @entity(immutable: true) {
  id: Bytes!
  poolId: BigInt! # uint256
  params: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DelayVaultProviderVaultValueChanged @entity(immutable: true) {
  id: Bytes!
  token: Bytes! # address
  owner: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewPoolCreated @entity(immutable: true) {
  id: Bytes!
  PoolId: BigInt! # uint256
  Token: Bytes! # address
  FinishTime: BigInt! # uint64
  StartAmount: BigInt! # uint256
  Owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}type Deposited @entity(immutable: true) {
  id: Bytes!
  vaultId: BigInt! # uint256
  tokenAddress: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewVaultCreated @entity(immutable: true) {
  id: Bytes!
  vaultId: BigInt! # uint256
  tokenAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VaultRoyaltySet @entity(immutable: true) {
  id: Bytes!
  vaultId: BigInt! # uint256
  tokenAddress: Bytes! # address
  receiver: Bytes! # address
  feeNumerator: BigInt! # uint96
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VaultStatusUpdate @entity(immutable: true) {
  id: Bytes!
  vaultId: BigInt! # uint256
  depositStatus: Boolean! # bool
  withdrawStatus: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Withdrawn @entity(immutable: true) {
  id: Bytes!
  vaultId: BigInt! # uint256
  tokenAddress: Bytes! # address
  to: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BaseURIChanged @entity(immutable: true) {
  id: Bytes!
  oldBaseURI: String! # string
  newBaseURI: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BatchMetadataUpdate @entity(immutable: true) {
  id: Bytes!
  _fromTokenId: BigInt! # uint256
  _toTokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ContractApproved @entity(immutable: true) {
  id: Bytes!
  contractAddress: Bytes! # address
  status: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MetadataUpdate @entity(immutable: true) {
  id: Bytes!
  _tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LockDealNFTOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PoolSplit @entity(immutable: true) {
  id: Bytes!
  poolId: BigInt! # uint256
  owner: Bytes! # address
  newPoolId: BigInt! # uint256
  newOwner: Bytes! # address
  splitLeftAmount: BigInt! # uint256
  newSplitLeftAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenWithdrawn @entity(immutable: true) {
  id: Bytes!
  poolId: BigInt! # uint256
  owner: Bytes! # address
  withdrawnAmount: BigInt! # uint256
  leftAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type FirewallAdminUpdated @entity(immutable: true) {
  id: Bytes!
  newAdmin: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FirewallUpdated @entity(immutable: true) {
  id: Bytes!
  newFirewall: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DealProviderUpdateParams @entity(immutable: true) {
  id: Bytes!
  poolId: BigInt! # uint256
  params: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type LockDealProviderFirewallAdminUpdated @entity(immutable: true) {
  id: Bytes!
  newAdmin: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LockDealProviderFirewallUpdated @entity(immutable: true) {
  id: Bytes!
  newFirewall: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LockDealProviderUpdateParams @entity(immutable: true) {
  id: Bytes!
  poolId: BigInt! # uint256
  params: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type TimedDealProviderFirewallAdminUpdated @entity(immutable: true) {
  id: Bytes!
  newAdmin: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TimedDealProviderFirewallUpdated @entity(immutable: true) {
  id: Bytes!
  newFirewall: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TimedDealProviderUpdateParams @entity(immutable: true) {
  id: Bytes!
  poolId: BigInt! # uint256
  params: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type EIP712DomainChanged @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DispenserProviderFirewallAdminUpdated @entity(immutable: true) {
  id: Bytes!
  newAdmin: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DispenserProviderFirewallUpdated @entity(immutable: true) {
  id: Bytes!
  newFirewall: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PoolCreated @entity(immutable: true) {
  id: Bytes!
  poolId: BigInt! # uint256
  provider: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokensDispensed @entity(immutable: true) {
  id: Bytes!
  poolId: BigInt! # uint256
  user: Bytes! # address
  amountTaken: BigInt! # uint256
  leftAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DispenserProviderUpdateParams @entity(immutable: true) {
  id: Bytes!
  poolId: BigInt! # uint256
  params: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Vault @entity(immutable: false) {
  id: ID!
  vaultId: BigInt! # uint256
  token: Bytes! # address
  balance: BigInt! # uint256
  depositStatus: Boolean! # bool
  withdrawStatus: Boolean! # bool
  royaltyReceiver: Bytes! # address
  royaltyFeeNumerator: BigInt! # uint96
  transactionHash: Bytes!
}